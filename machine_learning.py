def image_class(event, context):  
  # -*- coding: utf-8 -*-
  """404 VGG16 - Final Augmented Set
  Automatically generated by Colaboratory.
  Original file is located at
      https://colab.research.google.com/drive/19lHiAwsryNDoO5Jy9BchZoMatHRdWPq5
  # Background Imports
  """
  import matplotlib.pyplot as plt 
  import numpy as np
  import tensorflow as tf
  from tensorflow import keras
  from tensorflow._api.v2 import image 
  from PIL import Image  
  import pandas as pd
  from pandas import DataFrame

  model = keras.models.load_model('404-KCV/') # need to change path to S3

  # label our data in batches
  CLASS_NAMES= ['ZACH6', 'ZACH5', 'ZACH4', 'ZACH3', 'ZACH2', 'ZACH1', 'WEB4', 'WEB3', 'WEB2', 'WEB1', 'PETE3', 'PETE2', 'PETE1', 'MEOB3', 'MEOB2', 'MEOB1', 'HEB4', 'HEB3', 'HEB2', 'HEB1', 'ETB5', 'ETB4', 'ETB3', 'ETB2', 'ETB1', 'DLEB1', 'CVLB2', 'CVLB1', 'CHEN3', 'CHEN2', 'CHEN1']

  # Prediction
  from keras.preprocessing import image
  imagepath = 'user-image.jpg' # need to do user image
  import boto3
  s3 = boto3.resource('s3')
  s3.Bucket('user-input-image').download_file('user-image.jpg', '/tmp/user-image.jpg')
  image = Image.open('/tmp/user-image.jpg')
  small_image = image.resize((224,224)) # input size for VGG16 224,224
  small_imgarr = np.array(small_image)
  img = np.expand_dims(small_imgarr, axis=0)
  output = model.predict(img)

  print(np.argmax(output))

  # dataframe of all of the database coordinates
  df = pd.read_csv('FINAL_CSV.csv')

  """# Cosine Similarity"""

  from scipy import spatial

  TestArray = img
  TestArray = TestArray.flatten()
  compArray = [] # comparison array
  SimArray = [] # similarity percentage array
  SimHold = [] # array for holding images from individual classes as outputted by the classifier
  indexHold = [] # array for holding original ImageList index of images from individual classes in SimHold

  # only does cosine distance between test image and images from database of its class
  for i in range(np.argmax(output)*1000, (np.argmax(output)+1)*1000): # total number of images in dataset
    imagepath = 'content/IMG_' + df['FileName'][i][4:10] + '.jpg'
    image = Image.open(imagepath)
    compArray = np.array(image)
    compArray = compArray.flatten()
    dist = 1 - spatial.distance.cosine(TestArray, compArray)
    SimArray.append(dist)
    indexHold.append(i)

  """Sort Array to get top 5 images"""

  from numpy.core.fromnumeric import sort
  import scipy.misc
  from scipy import ndimage

  # get indexes of these percentages to pull the images
  sort_index = np.argsort(SimArray)
  sort_index = sort_index[::-1]
  sort_index = (np.argmax(output)*1000) + sort_index
  print("sort_index:")
  print(sort_index[0:5])

  tot_lat = 0
  tot_lon = 0
  for i in range(0,5):
    # get gps data from dataframe at same indexes as images
    # print(df['GPSLatitude'][finderIndex[i]], df['GPSLongitude'][finderIndex[i]])
    tot_lat = tot_lat + float(df['GPSLatitude'][sort_index[i]])
    tot_lon = tot_lon + float(df['GPSLongitude'][sort_index[i]])

  import math
  # do once prediction is figured out
  avg_lat = tot_lat / 5
  avg_lon = tot_lon / 5
  return avg_lat, avg_lon
